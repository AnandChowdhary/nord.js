import{_ as e,c as t,o as a,a as r}from"./app.58eb6ab7.js";const m=JSON.parse('{"title":"About Nord.js","description":"","frontmatter":{},"headers":[{"level":2,"title":"Runtime","slug":"runtime"},{"level":2,"title":"Inspiration","slug":"inspiration"}],"relativePath":"about.md"}'),o={name:"about.md"},n=r('<h1 id="about-nord-js" tabindex="-1">About Nord.js <a class="header-anchor" href="#about-nord-js" aria-hidden="true">#</a></h1><p>Nord.js is a fast, familiar backend framework for building RESTful APIs in TypeScript. You can think of it like a backend framework designed for frontend developers.</p><h2 id="runtime" tabindex="-1">Runtime <a class="header-anchor" href="#runtime" aria-hidden="true">#</a></h2><table><thead><tr><th>Runtime</th><th>Package</th><th>Status</th></tr></thead><tbody><tr><td>Node.js</td><td><code>@nordjs/node</code></td><td>\u2705 Completed</td></tr><tr><td>Bun</td><td><code>@nordjs/bun</code></td><td>\u{1F6A7} In progress</td></tr><tr><td>Deno</td><td><code>@nordjs/deno</code></td><td>\u{1F91E} Planned</td></tr></tbody></table><h2 id="inspiration" tabindex="-1">Inspiration <a class="header-anchor" href="#inspiration" aria-hidden="true">#</a></h2><p><strong>Nord.js stands on the shoulders of giants.</strong> I&#39;ve been using <a href="https://nestjs.com" target="_blank" rel="noreferrer">NestJS</a> for years, also in production, so I&#39;m a big fan of the project and the team. It&#39;s extremely structured, well thought out, and has a growing ecosystem, so it&#39;s always my first recommendation for large-scale, production applications in TypeScript. The problem is that developers familiar with frontend frameworks like <a href="https://nextjs.org" target="_blank" rel="noreferrer">Next.js</a> and React have trouble understanding &quot;the NestJS way&quot;, with concepts like providers, modules, and services. And when you add circular dependencies and asynchronous injection in the mix, it&#39;s hard to keep up.</p><p>Nord.js, on the other hand, feels like it&#39;s on the intersection of NestJS and Next.js. It&#39;s a backend framework designed for frontend developers, with familiar concepts like file-based routing and hooks for data validation, and built on top of familiar frameworks like Express.</p>',7),d=[n];function s(i,c,h,l,u,p){return a(),t("div",null,d)}const _=e(o,[["render",s]]);export{m as __pageData,_ as default};
