import { parse } from "@swc/core";
import { readFile, writeFile } from "fs/promises";
import { join, resolve } from "path";
import { getFiles } from "./helpers";

export const build = async (): Promise<void> => {
  const now = new Date();
  const nowTime = now.getTime();
  let appJs = `// DO NOT EDIT. This file is generated by Nord.js.
// This file SHOULD be checked into source version control.
// This file is automatically updated during development when running \`nord build\`.
import { NordManifest } from "@nordjs/types";

/** Autogenerated Nord.js manifest file */
export const nordManifest = async (): Promise<NordManifest> =>
  ({
    schemaVersion: "0.0.0",
    createdAt: ${nowTime},
    routes: {`;
  for await (const file of getFiles(join(".", "routes"))) {
    const contents = await readFile(file, "utf8");
    const parsed = await parse(contents, { syntax: "typescript" });

    const verbs = new Set<string>();
    parsed.body.forEach((i): void => {
      if (i.type === "ExportDeclaration")
        if (i.declaration.type === "VariableDeclaration")
          i.declaration.declarations.forEach((j): void => {
            if (j.id.type === "Identifier") verbs.add(j.id.value);
          });
    });

    verbs.forEach((verb): void => {
      if (
        ![
          "get",
          "head",
          "post",
          "put",
          "delete",
          "connect",
          "options",
          "trace",
          "patch",
        ].includes(verb)
      )
        return;

      const route = file
        .replace(resolve(join(".", "routes")), "")
        .replace(/.ts$/, "")
        .replace(/index/g, "");
      const key = `${verb}${route.replace(/\W/g, "_")}`;

      appJs += `\n      "${verb.toUpperCase()} ${route}": (await import("./routes${route}")).${verb},`;

      console.log(`Mapped ${verb.toUpperCase()} ${route}`);
    });
  }

  appJs += `\n    },
  } as const);
`;
  await writeFile(join(".", "nord.gen.ts"), appJs);
  console.log(`âœ… Routes generated in ${Date.now() - nowTime}ms`);
};
