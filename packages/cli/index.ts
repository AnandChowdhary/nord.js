import { readdir as readDir, writeFile } from "fs/promises";
import { resolve } from "path";

console.log("Generating nord.gen.ts");

async function* getTypeScriptFiles(dir: string): AsyncGenerator<string> {
  const files = await readDir(dir, { withFileTypes: true });
  for (const file of files) {
    const res = resolve(dir, file.name);
    if (file.isDirectory()) {
      yield* getTypeScriptFiles(res);
    } else {
      yield res;
    }
  }
}

const routes = [];

for await (const path of getTypeScriptFiles("../../examples/nodejs/routes")) {
  const relativePath = path
    .replace(resolve("../../examples/nodejs/routes"), "")
    .slice(0, -3);
  const method = relativePath.split("/").pop();
  if (!method) throw new Error("No method found");
  const pathname = relativePath.slice(0, -1 * method.length - 1);
  routes.push({
    method,
    pathname,
  });
}

const sortedRoutes = routes.sort((a, b) =>
  a.pathname.localeCompare(b.pathname)
);

await writeFile(
  "../../examples/nodejs/nord.gen.ts",
  `// This file is generated by Nord.js
// Do not edit this file directly
import type { Manifest } from "nordjs";
${sortedRoutes
  .map(
    (route, index) =>
      `import $${index} from "./routes${route.pathname}/${route.method}.js";`
  )
  .join("\n")}

const manifest: Manifest = {
  routes: [
${sortedRoutes
  .map(
    (route, index) => `    {
      route: $${index},
      method: "${route.method}",
      pathname: "${route.pathname}",
    },`
  )
  .join("\n")}
  ]
};

export default manifest;
`
);
